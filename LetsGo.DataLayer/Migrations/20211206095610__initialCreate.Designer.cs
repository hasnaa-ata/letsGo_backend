// <auto-generated />
using System;
using LetsGo.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LetsGo.DataLayer.Migrations
{
    [DbContext(typeof(LetsGoDBContext))]
    [Migration("20211206095610__initialCreate")]
    partial class _initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Security.TableEntity.AccessType", b =>
                {
                    b.Property<Guid>("AccessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessTypeAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccessTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccessTypeId");

                    b.HasIndex("AccessTypeAltName")
                        .IsUnique()
                        .HasFilter("[AccessTypeAltName] IS NOT NULL");

                    b.HasIndex("AccessTypeName")
                        .IsUnique();

                    b.ToTable("AccessType", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.RoleService", b =>
                {
                    b.Property<Guid>("RoleServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleServiceId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RoleService", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.RoleServiceAccess", b =>
                {
                    b.Property<Guid>("RoleServiceAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleServiceAccessId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceAccessId");

                    b.ToTable("RoleServiceAccess", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceAltDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceAltName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceTag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceId");

                    b.ToTable("Service", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.ServiceAccess", b =>
                {
                    b.Property<Guid>("ServiceAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceAccessId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAccess", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ImageURL")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserAltFullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkPlace")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("User", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserService", b =>
                {
                    b.Property<Guid>("UserServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserServiceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserService", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserServiceAccess", b =>
                {
                    b.Property<Guid>("UserServiceAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserServiceAccessId");

                    b.HasIndex("ServiceAccessId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServiceAccess", "security");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "security");
                });

            modelBuilder.Entity("DataLayer.Security.ViewEntity.RoleServiceAccessView", b =>
                {
                    b.Property<Guid>("RoleServiceAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleServiceAccessId");

                    b.ToView("RoleServiceAccessView");
                });

            modelBuilder.Entity("DataLayer.Security.ViewEntity.ServiceAccessView", b =>
                {
                    b.Property<Guid>("ServiceAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessTypeAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceAccessId");

                    b.ToView("ServiceAccessView");
                });

            modelBuilder.Entity("DataLayer.Security.ViewEntity.UserRoleServiceAccessView", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId", "ServiceId");

                    b.ToView("UserRoleServiceAccessView");
                });

            modelBuilder.Entity("DataLayer.Security.ViewEntity.UserRoleView", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserRoleId");

                    b.ToView("UserRoleView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileRegExp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NationalIdentityRegExp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneRegExp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltDescription")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("GroupAltName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("GroupStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNoMembers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId");

                    b.HasIndex("GroupStatusId");

                    b.HasIndex("RoutineId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.GroupStatus", b =>
                {
                    b.Property<Guid>("GroupStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupStatusAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupStatusId");

                    b.HasIndex("GroupStatusAltName")
                        .IsUnique()
                        .HasFilter("[GroupStatusAltName] IS NOT NULL");

                    b.HasIndex("GroupStatusName")
                        .IsUnique();

                    b.ToTable("GroupStatus");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvitationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvitationId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Routine", b =>
                {
                    b.Property<Guid>("RoutineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineAltName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RoutineCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineDestinationAdderss")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double>("RoutineDestinationLatitude")
                        .HasColumnType("float");

                    b.Property<double>("RoutineDestinationLongtitude")
                        .HasColumnType("float");

                    b.Property<string>("RoutineName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("RoutineRouteTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineSourceAdderss")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double>("RoutineSourceLatitude")
                        .HasColumnType("float");

                    b.Property<double>("RoutineSourceLongtitude")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoutineId");

                    b.HasIndex("RoutineCategoryId");

                    b.HasIndex("RoutineRouteTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Routine");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.RoutineCategory", b =>
                {
                    b.Property<Guid>("RoutineCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineCategoryAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoutineCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoutineCategoryId");

                    b.HasIndex("RoutineCategoryAltName")
                        .IsUnique()
                        .HasFilter("[RoutineCategoryAltName] IS NOT NULL");

                    b.HasIndex("RoutineCategoryName")
                        .IsUnique();

                    b.ToTable("RoutineCategory");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.RoutineDay", b =>
                {
                    b.Property<Guid>("RoutineDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("RoutineDayId");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineDay");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.RoutineRouteType", b =>
                {
                    b.Property<Guid>("RoutineRouteTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineRouteTypeAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoutineRouteTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoutineRouteTypeId");

                    b.HasIndex("RoutineRouteTypeAltName")
                        .IsUnique()
                        .HasFilter("[RoutineRouteTypeAltName] IS NOT NULL");

                    b.HasIndex("RoutineRouteTypeName")
                        .IsUnique();

                    b.ToTable("RoutineRouteTypes");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.State", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateAltName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.UserGroup", b =>
                {
                    b.Property<Guid>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.GroupStatusView", b =>
                {
                    b.Property<Guid>("GroupStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupStatusAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupStatusId");

                    b.ToView("GroupStatusView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.GroupView", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupStatusAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNoMembers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToView("GroupView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.InvitationView", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAltFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvitationId");

                    b.ToView("InvitationView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.RoutineCategoryView", b =>
                {
                    b.Property<Guid>("RoutineCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineCategoryAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoutineCategoryId");

                    b.ToView("RoutineCategoryView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.RoutineRouteTypeView", b =>
                {
                    b.Property<Guid>("RoutineRouteTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineRouteTypeAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineRouteTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoutineRouteTypeId");

                    b.ToView("RoutineRouteTypeView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.RoutineView", b =>
                {
                    b.Property<Guid>("RoutineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineCategoryAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoutineCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineDestinationAdderss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RoutineDestinationLatitude")
                        .HasColumnType("float");

                    b.Property<double>("RoutineDestinationLongtitude")
                        .HasColumnType("float");

                    b.Property<string>("RoutineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineRouteTypeAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoutineRouteTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoutineRouteTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineSourceAdderss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RoutineSourceLatitude")
                        .HasColumnType("float");

                    b.Property<double>("RoutineSourceLongtitude")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoutineId");

                    b.ToView("RoutineView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.UserGroupView", b =>
                {
                    b.Property<Guid>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAltFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGroupId");

                    b.ToView("UserGroupView");
                });

            modelBuilder.Entity("LetsGo.DataLayer.ViewEntity.UserView", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAltFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToView("UserView");
                });

            modelBuilder.Entity("Mawid.DataLayer.ViewEntity.CityView", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToView("CityView");
                });

            modelBuilder.Entity("Mawid.DataLayer.ViewEntity.CountryView", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileRegExp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIdentityRegExp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneRegExp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToView("CountryView");
                });

            modelBuilder.Entity("Mawid.DataLayer.ViewEntity.StateView", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("IsBlock_str")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyUser_FullAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyUser_FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateAltName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.ToView("StateView");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.RoleClaim", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.RoleService", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.Role", "Role")
                        .WithMany("RoleServices")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.Service", "Service")
                        .WithMany("RoleServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.RoleServiceAccess", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.Role", "Role")
                        .WithMany("RoleServiceAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.ServiceAccess", "ServiceAccess")
                        .WithMany("RoleServiceAccesses")
                        .HasForeignKey("ServiceAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("ServiceAccess");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.ServiceAccess", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.AccessType", "AccessType")
                        .WithMany("ServiceAccess")
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.Service", "Service")
                        .WithMany("ServiceAccesses")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.User", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserClaim", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserLogin", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserRole", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserService", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.Service", "Service")
                        .WithMany("UserServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("UserServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserServiceAccess", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.ServiceAccess", "ServiceAccess")
                        .WithMany("UserServiceAccesses")
                        .HasForeignKey("ServiceAccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("UserServiceAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceAccess");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.UserToken", b =>
                {
                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.City", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Group", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.GroupStatus", "GroupStatus")
                        .WithMany("Groups")
                        .HasForeignKey("GroupStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetsGo.DataLayer.TableEntity.Routine", "Routine")
                        .WithMany()
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupStatus");

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Invitation", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Routine", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.RoutineCategory", "RoutineCategory")
                        .WithMany("Routines")
                        .HasForeignKey("RoutineCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LetsGo.DataLayer.TableEntity.RoutineRouteType", "RoutineRouteType")
                        .WithMany("Routines")
                        .HasForeignKey("RoutineRouteTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("Routines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoutineCategory");

                    b.Navigation("RoutineRouteType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.RoutineDay", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.Routine", "Routine")
                        .WithMany("RoutineDays")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.State", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.UserGroup", b =>
                {
                    b.HasOne("LetsGo.DataLayer.TableEntity.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Security.TableEntity.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.AccessType", b =>
                {
                    b.Navigation("ServiceAccess");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("RoleServiceAccesses");

                    b.Navigation("RoleServices");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.Service", b =>
                {
                    b.Navigation("RoleServices");

                    b.Navigation("ServiceAccesses");

                    b.Navigation("UserServices");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.ServiceAccess", b =>
                {
                    b.Navigation("RoleServiceAccesses");

                    b.Navigation("UserServiceAccesses");
                });

            modelBuilder.Entity("DataLayer.Security.TableEntity.User", b =>
                {
                    b.Navigation("Routines");

                    b.Navigation("UserClaims");

                    b.Navigation("UserGroups");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserServiceAccesses");

                    b.Navigation("UserServices");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Group", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.GroupStatus", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.Routine", b =>
                {
                    b.Navigation("RoutineDays");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.RoutineCategory", b =>
                {
                    b.Navigation("Routines");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.RoutineRouteType", b =>
                {
                    b.Navigation("Routines");
                });

            modelBuilder.Entity("LetsGo.DataLayer.TableEntity.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
